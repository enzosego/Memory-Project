{"version":3,"sources":["components/Header.js","components/Board.js","components/WinningScreen.js","components/LosingScreen.js","App.js","index.js"],"names":["Header","score","bestScore","className","Board","tiles","checkForClicked","map","tile","id","onClick","uniqid","WinningScreen","setIsWon","resetGame","LosingScreen","setIsLost","App","useState","setScore","setTiles","clickedTiles","setClickedTiles","setBestScore","isWon","isLost","useEffect","e","indexOf","target","prevValue","newClickedTiles","push","newTilesOrder","forEach","Math","random","unshift","alterTilesOrder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAEaA,EAAS,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,UAC7B,OACE,mCACE,sDACA,0BAASC,UAAU,kBAAnB,UACE,iDAAoBF,KACpB,8CAAiBC,Y,gBCLZE,EAAQ,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,gBAY5B,OACE,qBAAKH,UAAU,QAAf,SAXOE,EAAME,KAAI,SAAAC,GAAI,OACb,qBACEL,UAAU,OAEVM,GAAID,EACJE,QAASJ,EAJX,SAKE,qBAAKH,UAAU,OAAf,SAAuBK,KAHlBG,aCNNC,EAAgB,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,UAKvC,OACE,0BACEX,UAAU,iBACVO,QAPgB,WAClBG,GAAS,GACTC,KAGA,UAGE,0CACA,qECVOC,EAAe,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,UAAWF,EAAe,EAAfA,UAKvC,OACE,0BACEX,UAAU,gBACVO,QAPgB,WAClBM,GAAU,GACVF,KAGA,UAGE,2CACA,qEC6DSG,EAlEH,WAAO,IAAD,EACUC,oBAAS,kBAAM,KADzB,mBACTjB,EADS,KACFkB,EADE,OAEUD,mBAAS,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,QAAS,WAF9F,mBAETb,EAFS,KAEFe,EAFE,OAGwBF,oBAAS,iBAAM,MAHvC,mBAGTG,EAHS,KAGKC,EAHL,OAIkBJ,oBAAS,kBAAM,KAJjC,mBAIThB,EAJS,KAIEqB,EAJF,OAKUL,oBAAS,GALnB,mBAKTM,EALS,KAKFX,EALE,OAMYK,oBAAS,GANrB,mBAMTO,EANS,KAMDT,EANC,KAQhBU,qBAAU,WACK,IAATzB,GAAaY,GAAS,KACzB,CAACZ,IAEJ,IAAMa,EAAY,WAChBS,EAAatB,GACbkB,EAAS,IA8BX,OACE,sBAAKhB,UAAU,MAAf,UACE,cAAC,EAAD,CACEF,MAAOA,EACPC,UAAWA,IAEb,cAAC,EAAD,CACEG,MAAOA,EACPC,gBArBkB,SAAAqB,GACtB,IAA2C,IAAvCN,EAAaO,QAAQD,EAAEE,OAAOpB,IAGhC,OAFAO,GAAU,QACVM,EAAgB,IAhBlBH,GAAS,SAAAW,GAAS,OAAIA,EAAY,KAoBlC,IAAIC,EAAe,YAAOV,GAC1BU,EAAgBC,KAAKL,EAAEE,OAAOpB,IAC9Ba,EAAgBS,GApBM,WACtB,IAAIE,EAAgB,GACpB5B,EAAM6B,SAAQ,SAAA1B,GACA2B,KAAKC,SACX,GACFH,EAAcD,KAAKxB,GACnByB,EAAcI,QAAQ7B,MAE5BY,EAASa,GAaTK,MAaGd,GACD,cAAC,EAAD,CACEX,SAAUA,EACVC,UAAWA,IACZW,GACD,cAAC,EAAD,CACET,UAAWA,EACXF,UAAWA,QChEnByB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.aed0685f.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Header = ({score, bestScore}) => {\n  return (\n    <header>\n      <h1>The Last Memory Game</h1>\n      <section className=\"score-container\">\n        <h3>Current Score: {score}</h3>\n        <h3>Best Score: {bestScore}</h3>\n      </section>\n    </header>\n  )\n}\n","import React from 'react';\nimport uniqid from 'uniqid';\n\nexport const Board = ({tiles, checkForClicked}) => {\n  const appendTiles = () => {\n    return tiles.map(tile => \n            <div \n              className=\"tile\"\n              key={uniqid()}\n              id={tile}\n              onClick={checkForClicked}>\n              <div className=\"name\">{tile}</div>\n            </div>)\n  }\n\n  return (\n    <div className=\"board\">\n      {appendTiles()}\n    </div>\n  )\n}\n","import React from \"react\"\n\nexport const WinningScreen = ({setIsWon, resetGame}) => {\n  const handleClick = () => {\n    setIsWon(false);\n    resetGame();\n  }\n  return(\n    <section \n      className=\"winning-screen\"\n      onClick={handleClick}>\n      <h1>You Won!</h1>\n      <h2>Click if you want to play again</h2>\n    </section>\n    )\n}\n","import React from \"react\"\n\nexport const LosingScreen = ({setIsLost, resetGame}) => {\n  const handleClick = () => {\n    setIsLost(false);\n    resetGame();\n  }\n  return(\n    <section\n      className=\"losing-screen\"\n      onClick={handleClick}>\n      <h1>You Lost!</h1>\n      <h2>Click if you want to play again</h2>\n    </section>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { Header } from './components/Header';\nimport { Board } from './components/Board';\nimport { WinningScreen } from './components/WinningScreen';\nimport { LosingScreen } from './components/LosingScreen';\n\nconst App = () => {\n  const [score, setScore] = useState(() => 0);\n  const [tiles, setTiles] = useState(['aang', 'toph', 'zuko', 'momo', 'ozai', 'sokka', 'iroh', 'appa', 'azula', 'katara']);\n  const [clickedTiles, setClickedTiles] = useState(() => []);\n  const [bestScore, setBestScore] = useState(() => 0);\n  const [isWon, setIsWon] = useState(false);\n  const [isLost, setIsLost] = useState(false);\n  \n  useEffect(() => {\n    if (score == 10) setIsWon(true);\n  }, [score])\n\n  const resetGame = () => {\n    setBestScore(score);\n    setScore(0);\n  }\n\n  const earnPoint = () => \n    setScore(prevValue => prevValue + 1);\n\n  const alterTilesOrder = () => {\n    let newTilesOrder = [];\n    tiles.forEach(tile => {\n      const num = Math.random();\n      num > 0.5 \n        ? newTilesOrder.push(tile)\n        : newTilesOrder.unshift(tile);\n    });\n    setTiles(newTilesOrder);\n  }\n\n  const checkForClicked = e => {\n    if (clickedTiles.indexOf(e.target.id) !== -1) {\n      setIsLost(true);\n      setClickedTiles([]);\n      return;\n    } \n    earnPoint();\n    let newClickedTiles = [...clickedTiles];\n    newClickedTiles.push(e.target.id);\n    setClickedTiles(newClickedTiles);\n    alterTilesOrder();\n  }\n\n  return (\n    <div className=\"App\">\n      <Header \n        score={score}\n        bestScore={bestScore}\n      />\n      <Board \n        tiles={tiles}\n        checkForClicked={checkForClicked}\n      />\n      {isWon && \n      <WinningScreen \n        setIsWon={setIsWon} \n        resetGame={resetGame}/>}\n      {isLost &&\n      <LosingScreen\n        setIsLost={setIsLost}\n        resetGame={resetGame}/>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}